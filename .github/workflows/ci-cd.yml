name: CI/CD Pipeline

on:
  push:
    branches: [ master, develop ]
  pull_request:
    branches: [ master ]
  workflow_dispatch:
    inputs:
      dry_run:
        description: 'Run build and checks only; skip deploy'
        required: false
        default: 'false'
      target_branch:
        description: 'Branch to simulate production deploy (master/main)'
        required: false
        default: 'master'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run linter
      run: npm run lint
      
    - name: Run type check
      run: npm run type-check
      
    - name: Build application
      run: npm run build
      
    - name: Run tests (if available)
      run: npm test --if-present
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-files-${{ matrix.node-version }}
        path: .next/
        retention-days: 1

  deploy-preview:
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Validate Vercel secrets
      run: |
        if [ -z "${{ secrets.VERCEL_TOKEN }}" ]; then echo "Warning: Missing secret VERCEL_TOKEN — deploy will be skipped"; fi
        if [ -z "${{ secrets.VERCEL_ORG_ID }}" ]; then echo "Warning: Missing secret VERCEL_ORG_ID — deploy will be skipped"; fi
        if [ -z "${{ secrets.VERCEL_PROJECT_ID }}" ]; then echo "Warning: Missing secret VERCEL_PROJECT_ID — deploy will be skipped"; fi
      
    - name: Deploy to Vercel (Preview)
      if: ${{ secrets.VERCEL_TOKEN != '' && secrets.VERCEL_ORG_ID != '' && secrets.VERCEL_PROJECT_ID != '' }}
      uses: amondnet/vercel-action@v25
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
        scope: ${{ secrets.VERCEL_ORG_ID }}

  deploy-production:
    runs-on: ubuntu-latest
    needs: build-and-test
    if: (github.event_name == 'push' && github.ref == 'refs/heads/master') || (github.event_name == 'workflow_dispatch' && inputs.target_branch == 'master')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Validate Vercel secrets
      run: |
        if [ -z "${{ secrets.VERCEL_TOKEN }}" ]; then echo "Warning: Missing secret VERCEL_TOKEN — deploy will be skipped"; fi
        if [ -z "${{ secrets.VERCEL_ORG_ID }}" ]; then echo "Warning: Missing secret VERCEL_ORG_ID — deploy will be skipped"; fi
        if [ -z "${{ secrets.VERCEL_PROJECT_ID }}" ]; then echo "Warning: Missing secret VERCEL_PROJECT_ID — deploy will be skipped"; fi
      
    - name: Deploy to Vercel (Production)
      if: ${{ (github.event_name != 'workflow_dispatch' || inputs.dry_run != 'true') && secrets.VERCEL_TOKEN != '' && secrets.VERCEL_ORG_ID != '' && secrets.VERCEL_PROJECT_ID != '' }}
      uses: amondnet/vercel-action@v25
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
        vercel-args: '--prod'
        scope: ${{ secrets.VERCEL_ORG_ID }}

    - name: Health check (Production)
      if: ${{ (github.event_name != 'workflow_dispatch' || inputs.dry_run != 'true') && vars.PRODUCTION_URL != '' }}
      run: |
        URL="${{ vars.PRODUCTION_URL }}"
        echo "Checking production URL: $URL"
        for i in {1..10}; do
          STATUS=$(curl -s -o /dev/null -w "%{http_code}" "$URL")
          echo "Attempt $i: HTTP $STATUS"
          if [ "$STATUS" = "200" ] || [ "$STATUS" = "301" ] || [ "$STATUS" = "302" ]; then
            echo "Health check passed"
            exit 0
          fi
          sleep 6
        done
        echo "Health check failed after retries"
        exit 1